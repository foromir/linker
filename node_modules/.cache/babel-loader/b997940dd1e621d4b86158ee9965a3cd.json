{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nexport default function useComponentVisible(initialIsVisible) {\n  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsComponentVisible(false);\n      document.body.style.overflow = \"auto\";\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, true);\n    const dpowDown_content = document.getElementsByClassName(\"dpowDown_content\");\n\n    if (dpowDown_content.length) {\n      document.body.style.overflow = \"hidden\";\n      const parrentPosition = ref.current.getBoundingClientRect();\n      dpowDown_content[0].style.top = 20 + parrentPosition.top + \"px\";\n      dpowDown_content[0].style.left = -100 + parrentPosition.left + \"px\";\n      dpowDown_content[0].style.display = \"block\";\n    }\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n  return {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible\n  };\n}","map":{"version":3,"sources":["/Users/mikhailkalugin/Documents/link/link/src/hooks/useComponentVisible.js"],"names":["useState","useEffect","useRef","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","ref","handleClickOutside","event","current","contains","target","document","body","style","overflow","addEventListener","dpowDown_content","getElementsByClassName","length","parrentPosition","getBoundingClientRect","top","left","display","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,eAAe,SAASC,mBAAT,CAA6BC,gBAA7B,EAA+C;AAC5D,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAC1DI,gBAD0D,CAA5D;AAGA,QAAMG,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;;AAEA,QAAMM,kBAAkB,GAAGC,KAAK,IAAI;AAClC,QAAIF,GAAG,CAACG,OAAJ,IAAe,CAACH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtDN,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAO,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,MAA/B;AACD;AACF,GALD;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAACI,gBAAT,CAA0B,OAA1B,EAAmCT,kBAAnC,EAAuD,IAAvD;AAEA,UAAMU,gBAAgB,GAAGL,QAAQ,CAACM,sBAAT,CACvB,kBADuB,CAAzB;;AAGA,QAAID,gBAAgB,CAACE,MAArB,EAA6B;AAC3BP,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,QAA/B;AACA,YAAMK,eAAe,GAAGd,GAAG,CAACG,OAAJ,CAAYY,qBAAZ,EAAxB;AACAJ,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBH,KAApB,CAA0BQ,GAA1B,GAAgC,KAAKF,eAAe,CAACE,GAArB,GAA2B,IAA3D;AACAL,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBH,KAApB,CAA0BS,IAA1B,GAAiC,CAAC,GAAD,GAAOH,eAAe,CAACG,IAAvB,GAA8B,IAA/D;AACAN,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBH,KAApB,CAA0BU,OAA1B,GAAoC,OAApC;AACD;;AACD,WAAO,MAAM;AACXZ,MAAAA,QAAQ,CAACa,mBAAT,CAA6B,OAA7B,EAAsClB,kBAAtC,EAA0D,IAA1D;AACD,KAFD;AAGD,GAhBQ,CAAT;AAkBA,SAAO;AAAED,IAAAA,GAAF;AAAOF,IAAAA,kBAAP;AAA2BC,IAAAA;AAA3B,GAAP;AACD","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nexport default function useComponentVisible(initialIsVisible) {\n  const [isComponentVisible, setIsComponentVisible] = useState(\n    initialIsVisible\n  );\n  const ref = useRef(null);\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsComponentVisible(false);\n      document.body.style.overflow = \"auto\";\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, true);\n\n    const dpowDown_content = document.getElementsByClassName(\n      \"dpowDown_content\"\n    );\n    if (dpowDown_content.length) {\n      document.body.style.overflow = \"hidden\";\n      const parrentPosition = ref.current.getBoundingClientRect();\n      dpowDown_content[0].style.top = 20 + parrentPosition.top + \"px\";\n      dpowDown_content[0].style.left = -100 + parrentPosition.left + \"px\";\n      dpowDown_content[0].style.display = \"block\";\n    }\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return { ref, isComponentVisible, setIsComponentVisible };\n}\n"]},"metadata":{},"sourceType":"module"}
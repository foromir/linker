{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailkalugin/Documents/link/link/src/components/Table/EditModal.js\";\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\n\nconst EditModal = ({\n  editItemId,\n  editItemValue,\n  close,\n  text,\n  description,\n  handleSubmit,\n  buttonText,\n  expiredModal,\n  placeholder,\n  inputName\n}) => {\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modalTable_header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, text, React.createElement(\"div\", {\n    className: \"close_icon\",\n    onClick: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), inputName ? React.createElement(Formik, {\n    initialValues: {\n      [inputName]: editItemValue\n    },\n    validationSchema: () => Validation(inputName),\n    onSubmit: value => {\n      handleSubmit({\n        id: editItemId,\n        value: value[inputName]\n      });\n      close();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, () => React.createElement(Form, {\n    className: \"modalTable_content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, description && React.createElement(\"div\", {\n    className: \"modalTable_description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, description), editItemValue !== undefined && React.createElement(\"div\", {\n    className: \"modalTable_input_wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    placeholder: placeholder,\n    name: inputName,\n    className: \"input-default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: inputName,\n    render: msg => React.createElement(\"div\", {\n      className: \"error_input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, msg),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"btn default\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, buttonText))) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modalTable_content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, description && React.createElement(\"div\", {\n    className: \"modalTable_description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, description), expiredModal ? React.createElement(\"div\", {\n    className: \"wrapExpiredBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn link\",\n    onClick: e => {\n      e.preventDefault();\n      close();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"No\"), React.createElement(\"button\", {\n    className: \"btn default\",\n    onClick: () => {\n      handleSubmit({\n        id: editItemId\n      });\n      close();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, buttonText)) : React.createElement(\"button\", {\n    className: \"btn default\",\n    type: \"submit\",\n    onClick: () => {\n      handleSubmit({\n        id: editItemId\n      });\n      close();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, buttonText))));\n};\n\nconst Validation = inputName => {\n  if (inputName === \"url\") {\n    return yup.object().shape({\n      url: yup.string().required().matches( // eslint-disable-next-line\n      /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/, \"the url is incorrect\").min(2)\n    });\n  }\n\n  return yup.object().shape({\n    [inputName]: yup.string().required().min(2)\n  });\n};\n\nEditModal.propTypes = {\n  editItem: PropTypes.object,\n  close: PropTypes.func,\n  placeholder: PropTypes.string,\n  inputName: PropTypes.string,\n  text: PropTypes.string,\n  description: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  buttonText: PropTypes.string\n};\nexport default EditModal;","map":{"version":3,"sources":["/Users/mikhailkalugin/Documents/link/link/src/components/Table/EditModal.js"],"names":["React","Fragment","PropTypes","Form","Field","Formik","ErrorMessage","yup","EditModal","editItemId","editItemValue","close","text","description","handleSubmit","buttonText","expiredModal","placeholder","inputName","Validation","value","id","undefined","msg","e","preventDefault","object","shape","url","string","required","matches","min","propTypes","editItem","func"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\n\nconst EditModal = ({\n  editItemId,\n  editItemValue,\n  close,\n  text,\n  description,\n  handleSubmit,\n  buttonText,\n  expiredModal,\n  placeholder,\n  inputName\n}) => {\n  return (\n    <Fragment>\n      <div className=\"modalTable_header\">\n        {text}\n        <div className=\"close_icon\" onClick={close} />\n      </div>\n\n      {inputName ? (\n        <Formik\n          initialValues={{\n            [inputName]: editItemValue\n          }}\n          validationSchema={() => Validation(inputName)}\n          onSubmit={value => {\n            handleSubmit({ id: editItemId, value: value[inputName] });\n            close();\n          }}\n        >\n          {() => (\n            <Form className=\"modalTable_content\">\n              {description && (\n                <div className=\"modalTable_description\">{description}</div>\n              )}\n\n              {editItemValue !== undefined && (\n                <div className=\"modalTable_input_wrap\">\n                  <Field\n                    type=\"text\"\n                    placeholder={placeholder}\n                    name={inputName}\n                    className=\"input-default\"\n                  />\n                  <ErrorMessage\n                    name={inputName}\n                    render={msg => <div className=\"error_input\">{msg}</div>}\n                  ></ErrorMessage>\n                </div>\n              )}\n\n              <button className=\"btn default\" type=\"submit\">\n                {buttonText}\n              </button>\n            </Form>\n          )}\n        </Formik>\n      ) : (\n        <Fragment>\n          <div className=\"modalTable_content\">\n            {description && (\n              <div className=\"modalTable_description\">{description}</div>\n            )}\n\n            {expiredModal ? (\n              <div className=\"wrapExpiredBtn\">\n                <button\n                  className=\"btn link\"\n                  onClick={e => {\n                    e.preventDefault();\n                    close();\n                  }}\n                >\n                  No\n                </button>\n                <button\n                  className=\"btn default\"\n                  onClick={() => {\n                    handleSubmit({ id: editItemId });\n                    close();\n                  }}\n                >\n                  {buttonText}\n                </button>\n              </div>\n            ) : (\n              <button\n                className=\"btn default\"\n                type=\"submit\"\n                onClick={() => {\n                  handleSubmit({ id: editItemId });\n                  close();\n                }}\n              >\n                {buttonText}\n              </button>\n            )}\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\nconst Validation = inputName => {\n  if (inputName === \"url\") {\n    return yup.object().shape({\n      url: yup\n        .string()\n        .required()\n        .matches(\n          // eslint-disable-next-line\n          /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/,\n          \"the url is incorrect\"\n        )\n        .min(2)\n    });\n  }\n  return yup.object().shape({\n    [inputName]: yup\n      .string()\n      .required()\n      .min(2)\n  });\n};\n\nEditModal.propTypes = {\n  editItem: PropTypes.object,\n  close: PropTypes.func,\n  placeholder: PropTypes.string,\n  inputName: PropTypes.string,\n  text: PropTypes.string,\n  description: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  buttonText: PropTypes.string\n};\n\nexport default EditModal;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailkalugin/Documents/link/link/src/components/Forms/RegisterForm.js\";\nimport React from \"react\";\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\n\nconst LoginForm = ({\n  hendleSubmit\n}) => {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: Validation,\n    onSubmit: values => hendleSubmit({\n      email: values.email,\n      password: values.password\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, () => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"wrapInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"/images/envelope.svg\",\n    alt: \"envelope\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"Your email\",\n    className: \"input_auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"email\",\n    render: msg => React.createElement(\"div\", {\n      className: \"error_input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, msg),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"space68\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"wrapInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"/images/key.svg\",\n    alt: \"key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Your Password\",\n    className: \"input_auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"password\",\n    render: msg => React.createElement(\"div\", {\n      className: \"error_input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, msg),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"space50\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Sign Up\")));\n};\n\nconst Validation = yup.object().shape({\n  email: yup.string().email(\"Invalid email\").required(\"Enter your email\"),\n  password: yup.string().min(8, \"Password must be at least 8 characters\").max(16, \"Password must be at max 8 characters\").required(\"Enter your password\")\n});\nexport default LoginForm;","map":{"version":3,"sources":["/Users/mikhailkalugin/Documents/link/link/src/components/Forms/RegisterForm.js"],"names":["React","Form","Field","Formik","ErrorMessage","yup","LoginForm","hendleSubmit","email","password","Validation","values","msg","object","shape","string","required","min","max"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\n\nconst LoginForm = ({ hendleSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        password: \"\"\n      }}\n      validationSchema={Validation}\n      onSubmit={values =>\n        hendleSubmit({\n          email: values.email,\n          password: values.password\n        })\n      }\n    >\n      {() => (\n        <Form>\n          <div className=\"wrapInput\">\n            <img src=\"/images/envelope.svg\" alt=\"envelope\" />\n            <Field\n              type=\"text\"\n              name=\"email\"\n              placeholder=\"Your email\"\n              className=\"input_auth\"\n            />\n            <ErrorMessage\n              name=\"email\"\n              render={msg => <div className=\"error_input\">{msg}</div>}\n            ></ErrorMessage>\n          </div>\n\n          <div className=\"space68\" />\n          <div className=\"wrapInput\">\n            <img src=\"/images/key.svg\" alt=\"key\" />\n            <Field\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Your Password\"\n              className=\"input_auth\"\n            />\n\n            <ErrorMessage\n              name=\"password\"\n              render={msg => <div className=\"error_input\">{msg}</div>}\n            ></ErrorMessage>\n          </div>\n          <div className=\"space50\" />\n\n          <button type=\"submit\" className=\"btn default\">\n            Sign Up\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nconst Validation = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"Enter your email\"),\n  password: yup\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .max(16, \"Password must be at max 8 characters\")\n    .required(\"Enter your password\")\n});\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}